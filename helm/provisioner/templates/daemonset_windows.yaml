---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "provisioner.fullname" . }}-win
  namespace: {{ .Release.Namespace }}
  labels:
    helm.sh/chart: {{ template "provisioner.chart" . }}
    app.kubernetes.io/name: {{ template "provisioner.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "provisioner.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "provisioner.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
{{- if .Values.daemonset.podLabels }}
{{ .Values.daemonset.podLabels | toYaml | trim | indent 8 }}
{{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
{{- if .Values.daemonset.podAnnotations }}
{{ .Values.daemonset.podAnnotations | toYaml | trim | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: {{ template "provisioner.serviceAccountName" . }}
{{- if .Values.daemonset.priorityClassName }}
      priorityClassName: {{.Values.daemonset.priorityClassName}}
{{- end }}
      nodeSelector:
        kubernetes.io/os: windows
{{- if .Values.daemonset.nodeSelectorWindows }}
        {{ toYaml .Values.daemonset.nodeSelectorWindows | nindent 8 }}
{{- end }}
      tolerations:
        # an empty key operator Exists matches all keys, values and effects
        # which meants that this will tolerate everything
        - operator: "Exists"
{{- if .Values.daemonset.tolerations }}
        {{ toYaml .Values.daemonset.tolerations | nindent 8 }}
{{- end }}
{{- if .Values.daemonset.affinity }}
      affinity:
        {{ toYaml .Values.daemonset.affinity | nindent 8 }}
{{- end }}
{{- with .Values.daemonset.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
{{- end }}
      containers:
        - name: provisioner
          image: {{ .Values.daemonset.image }}
          {{- if .Values.daemonset.imagePullPolicy }}
          imagePullPolicy: {{ .Values.daemonset.imagePullPolicy }}
          {{- end }}
{{- if .Values.daemonset.resources }}
          resources:
            {{ toYaml .Values.daemonset.resources | nindent 12 }}
{{- end }}
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JOB_CONTAINER_IMAGE
            value: {{ .Values.daemonset.image }}
          {{- if .Values.daemonset.kubeConfigEnv }}
          - name: KUBECONFIG
            value: {{.Values.daemonset.kubeConfigEnv}}
          {{- end }}
          ports:
          - name: metrics
            containerPort: 8080
          volumeMounts:
            - name: provisioner-config
              mountPath: /etc/provisioner/config
              readOnly: true
            {{- if .Values.common.mountDevVolume }}
            - name: provisioner-dev
              mountPath: /dev
            {{- end }}
            {{- range $classConfig := .Values.classes }}
            - name: {{ $classConfig.name }}
              mountPath: {{ $classConfig.mountDir | default $classConfig.hostDir }}
              mountPropagation: HostToContainer
            {{- end }}
            - name: csi-proxy-volume-v1
              mountPath: \\.\pipe\csi-proxy-volume-v1
            - name: csi-proxy-filesystem-v1
              mountPath: \\.\pipe\csi-proxy-filesystem-v1
            # these csi-proxy paths are still included for compatibility, they're used
            # only if the node has still the beta version of the CSI proxy
            - name: csi-proxy-volume-v1beta2
              mountPath: \\.\pipe\csi-proxy-volume-v1beta2
            - name: csi-proxy-filesystem-v1beta2
              mountPath: \\.\pipe\csi-proxy-filesystem-v1beta2
            {{- with .Values.daemonset.additionalVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: csi-proxy-volume-v1
          hostPath:
            path: \\.\pipe\csi-proxy-volume-v1
            type: ""
        - name: csi-proxy-filesystem-v1
          hostPath:
            path: \\.\pipe\csi-proxy-filesystem-v1
            type: ""
        # these csi-proxy paths are still included for compatibility, they're used
        # only if the node has still the beta version of the CSI proxy
        - name: csi-proxy-volume-v1beta2
          hostPath:
            path: \\.\pipe\csi-proxy-volume-v1beta2
            type: ""
        - name: csi-proxy-filesystem-v1beta2
          hostPath:
            path: \\.\pipe\csi-proxy-filesystem-v1beta2
            type: ""
        - name: provisioner-config
          configMap:
            name: {{ template "provisioner.fullname" . }}-config
        {{- if .Values.common.mountDevVolume }}
        - name: provisioner-dev
          hostPath:
            path: "C:\\dev"
            # If nothing exists at the given path, an empty directory will be
            # created there as needed with permission set to 0755,
            # having the same group and ownership with Kubelet.
            type: DirectoryOrCreate
        {{- end }}
        {{- range $classConfig := .Values.classes }}
        - name: {{ $classConfig.name }}
          hostPath:
            path: {{ $classConfig.hostDir }}
        {{- end }}
        {{- range $name, $path := .Values.common.additionalHostPathVolumes }}
        - name: {{ quote $name }}
          hostPath:
            path: {{ quote $path }}
        {{- end }}
        {{- with .Values.common.additionalVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
